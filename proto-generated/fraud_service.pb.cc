// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fraud_service.proto

#include "fraud_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace fraudservice {
class TransactRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactRequest> _instance;
} _TransactRequest_default_instance_;
class TransactReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactReply> _instance;
} _TransactReply_default_instance_;
}  // namespace fraudservice
static void InitDefaultsscc_info_TransactReply_fraud_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fraudservice::_TransactReply_default_instance_;
    new (ptr) ::fraudservice::TransactReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fraudservice::TransactReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactReply_fraud_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransactReply_fraud_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_TransactRequest_fraud_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fraudservice::_TransactRequest_default_instance_;
    new (ptr) ::fraudservice::TransactRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fraudservice::TransactRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactRequest_fraud_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransactRequest_fraud_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fraud_5fservice_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_fraud_5fservice_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fraud_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fraud_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactRequest, transactionid_),
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactRequest, ipaddress_),
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactRequest, merchantid_),
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactRequest, useraddress_),
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactRequest, shippingaddress_),
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactRequest, city_),
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactRequest, country_),
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactRequest, amount_),
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactRequest, latitude_),
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactRequest, longitude_),
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactRequest, cookie_hash_),
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactRequest, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactReply, message_code_),
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactReply, fraud_score_),
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactReply, is_blocked_),
  PROTOBUF_FIELD_OFFSET(::fraudservice::TransactReply, reason_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fraudservice::TransactRequest)},
  { 18, -1, sizeof(::fraudservice::TransactReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fraudservice::_TransactRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fraudservice::_TransactReply_default_instance_),
};

const char descriptor_table_protodef_fraud_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023fraud_service.proto\022\014fraudservice\"\211\002\n\017"
  "TransactRequest\022\025\n\rtransactionId\030\001 \001(\t\022\021"
  "\n\tipAddress\030\002 \001(\t\022\022\n\nmerchantId\030\003 \001(\003\022\016\n"
  "\006userId\030\004 \001(\003\022\023\n\013userAddress\030\005 \001(\t\022\027\n\017sh"
  "ippingAddress\030\006 \001(\t\022\014\n\004city\030\007 \001(\t\022\017\n\007cou"
  "ntry\030\010 \001(\t\022\016\n\006amount\030\t \001(\002\022\020\n\010latitude\030\n"
  " \001(\002\022\021\n\tlongitude\030\013 \001(\002\022\023\n\013cookie_hash\030\014"
  " \001(\t\022\021\n\ttimeStamp\030\r \001(\014\"^\n\rTransactReply"
  "\022\024\n\014message_code\030\001 \001(\005\022\023\n\013fraud_score\030\002 "
  "\001(\002\022\022\n\nis_blocked\030\003 \001(\010\022\016\n\006reason\030\004 \001(\t*"
  "\?\n\021TransactionStatus\022\022\n\016TRANSACTION_OK\020\000"
  "\022\026\n\022TRANSACTION_FAILED\020\0012^\n\022FraudDetectS"
  "ervice\022H\n\010Transact\022\035.fraudservice.Transa"
  "ctRequest\032\033.fraudservice.TransactReply\"\000"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fraud_5fservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fraud_5fservice_2eproto_sccs[2] = {
  &scc_info_TransactReply_fraud_5fservice_2eproto.base,
  &scc_info_TransactRequest_fraud_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fraud_5fservice_2eproto_once;
static bool descriptor_table_fraud_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fraud_5fservice_2eproto = {
  &descriptor_table_fraud_5fservice_2eproto_initialized, descriptor_table_protodef_fraud_5fservice_2eproto, "fraud_service.proto", 568,
  &descriptor_table_fraud_5fservice_2eproto_once, descriptor_table_fraud_5fservice_2eproto_sccs, descriptor_table_fraud_5fservice_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_fraud_5fservice_2eproto::offsets,
  file_level_metadata_fraud_5fservice_2eproto, 2, file_level_enum_descriptors_fraud_5fservice_2eproto, file_level_service_descriptors_fraud_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fraud_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fraud_5fservice_2eproto), true);
namespace fraudservice {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fraud_5fservice_2eproto);
  return file_level_enum_descriptors_fraud_5fservice_2eproto[0];
}
bool TransactionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TransactRequest::InitAsDefaultInstance() {
}
class TransactRequest::_Internal {
 public:
};

TransactRequest::TransactRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fraudservice.TransactRequest)
}
TransactRequest::TransactRequest(const TransactRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transactionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transactionid().empty()) {
    transactionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transactionid_);
  }
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipaddress().empty()) {
    ipaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  useraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_useraddress().empty()) {
    useraddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.useraddress_);
  }
  shippingaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shippingaddress().empty()) {
    shippingaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shippingaddress_);
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  cookie_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cookie_hash().empty()) {
    cookie_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cookie_hash_);
  }
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timestamp().empty()) {
    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  ::memcpy(&merchantid_, &from.merchantid_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&merchantid_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:fraudservice.TransactRequest)
}

void TransactRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactRequest_fraud_5fservice_2eproto.base);
  transactionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  useraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shippingaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cookie_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&merchantid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&merchantid_)) + sizeof(longitude_));
}

TransactRequest::~TransactRequest() {
  // @@protoc_insertion_point(destructor:fraudservice.TransactRequest)
  SharedDtor();
}

void TransactRequest::SharedDtor() {
  transactionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  useraddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shippingaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cookie_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactRequest& TransactRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactRequest_fraud_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TransactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fraudservice.TransactRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  useraddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shippingaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cookie_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&merchantid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&merchantid_)) + sizeof(longitude_));
  _internal_metadata_.Clear();
}

const char* TransactRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transactionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transactionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fraudservice.TransactRequest.transactionId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ipAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ipaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fraudservice.TransactRequest.ipAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 merchantId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          merchantid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 userId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userAddress = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_useraddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fraudservice.TransactRequest.userAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string shippingAddress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_shippingaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fraudservice.TransactRequest.shippingAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string city = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fraudservice.TransactRequest.city"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fraudservice.TransactRequest.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float amount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latitude = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float longitude = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string cookie_hash = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_cookie_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fraudservice.TransactRequest.cookie_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes timeStamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fraudservice.TransactRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transactionId = 1;
  if (this->transactionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transactionid().data(), static_cast<int>(this->_internal_transactionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fraudservice.TransactRequest.transactionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transactionid(), target);
  }

  // string ipAddress = 2;
  if (this->ipaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipaddress().data(), static_cast<int>(this->_internal_ipaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fraudservice.TransactRequest.ipAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ipaddress(), target);
  }

  // int64 merchantId = 3;
  if (this->merchantid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_merchantid(), target);
  }

  // int64 userId = 4;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_userid(), target);
  }

  // string userAddress = 5;
  if (this->useraddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_useraddress().data(), static_cast<int>(this->_internal_useraddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fraudservice.TransactRequest.userAddress");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_useraddress(), target);
  }

  // string shippingAddress = 6;
  if (this->shippingaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shippingaddress().data(), static_cast<int>(this->_internal_shippingaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fraudservice.TransactRequest.shippingAddress");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_shippingaddress(), target);
  }

  // string city = 7;
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fraudservice.TransactRequest.city");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_city(), target);
  }

  // string country = 8;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fraudservice.TransactRequest.country");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_country(), target);
  }

  // float amount = 9;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_amount(), target);
  }

  // float latitude = 10;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_latitude(), target);
  }

  // float longitude = 11;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_longitude(), target);
  }

  // string cookie_hash = 12;
  if (this->cookie_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cookie_hash().data(), static_cast<int>(this->_internal_cookie_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fraudservice.TransactRequest.cookie_hash");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_cookie_hash(), target);
  }

  // bytes timeStamp = 13;
  if (this->timestamp().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fraudservice.TransactRequest)
  return target;
}

size_t TransactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fraudservice.TransactRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transactionId = 1;
  if (this->transactionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transactionid());
  }

  // string ipAddress = 2;
  if (this->ipaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipaddress());
  }

  // string userAddress = 5;
  if (this->useraddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_useraddress());
  }

  // string shippingAddress = 6;
  if (this->shippingaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shippingaddress());
  }

  // string city = 7;
  if (this->city().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string country = 8;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string cookie_hash = 12;
  if (this->cookie_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cookie_hash());
  }

  // bytes timeStamp = 13;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_timestamp());
  }

  // int64 merchantId = 3;
  if (this->merchantid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_merchantid());
  }

  // int64 userId = 4;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_userid());
  }

  // float amount = 9;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    total_size += 1 + 4;
  }

  // float latitude = 10;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float longitude = 11;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fraudservice.TransactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fraudservice.TransactRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fraudservice.TransactRequest)
    MergeFrom(*source);
  }
}

void TransactRequest::MergeFrom(const TransactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fraudservice.TransactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transactionid().size() > 0) {

    transactionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transactionid_);
  }
  if (from.ipaddress().size() > 0) {

    ipaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  if (from.useraddress().size() > 0) {

    useraddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.useraddress_);
  }
  if (from.shippingaddress().size() > 0) {

    shippingaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shippingaddress_);
  }
  if (from.city().size() > 0) {

    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.cookie_hash().size() > 0) {

    cookie_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cookie_hash_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  if (from.merchantid() != 0) {
    _internal_set_merchantid(from._internal_merchantid());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (!(from.amount() <= 0 && from.amount() >= 0)) {
    _internal_set_amount(from._internal_amount());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
}

void TransactRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fraudservice.TransactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactRequest::CopyFrom(const TransactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fraudservice.TransactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactRequest::IsInitialized() const {
  return true;
}

void TransactRequest::InternalSwap(TransactRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transactionid_.Swap(&other->transactionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipaddress_.Swap(&other->ipaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  useraddress_.Swap(&other->useraddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  shippingaddress_.Swap(&other->shippingaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cookie_hash_.Swap(&other->cookie_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timestamp_.Swap(&other->timestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(merchantid_, other->merchantid_);
  swap(userid_, other->userid_);
  swap(amount_, other->amount_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactReply::InitAsDefaultInstance() {
}
class TransactReply::_Internal {
 public:
};

TransactReply::TransactReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fraudservice.TransactReply)
}
TransactReply::TransactReply(const TransactReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&message_code_, &from.message_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_blocked_) -
    reinterpret_cast<char*>(&message_code_)) + sizeof(is_blocked_));
  // @@protoc_insertion_point(copy_constructor:fraudservice.TransactReply)
}

void TransactReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactReply_fraud_5fservice_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_blocked_) -
      reinterpret_cast<char*>(&message_code_)) + sizeof(is_blocked_));
}

TransactReply::~TransactReply() {
  // @@protoc_insertion_point(destructor:fraudservice.TransactReply)
  SharedDtor();
}

void TransactReply::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactReply& TransactReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactReply_fraud_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TransactReply::Clear() {
// @@protoc_insertion_point(message_clear_start:fraudservice.TransactReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_blocked_) -
      reinterpret_cast<char*>(&message_code_)) + sizeof(is_blocked_));
  _internal_metadata_.Clear();
}

const char* TransactReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 message_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          message_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fraud_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fraud_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_blocked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fraudservice.TransactReply.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fraudservice.TransactReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 message_code = 1;
  if (this->message_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_message_code(), target);
  }

  // float fraud_score = 2;
  if (!(this->fraud_score() <= 0 && this->fraud_score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fraud_score(), target);
  }

  // bool is_blocked = 3;
  if (this->is_blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_blocked(), target);
  }

  // string reason = 4;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fraudservice.TransactReply.reason");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fraudservice.TransactReply)
  return target;
}

size_t TransactReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fraudservice.TransactReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 4;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // int32 message_code = 1;
  if (this->message_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_message_code());
  }

  // float fraud_score = 2;
  if (!(this->fraud_score() <= 0 && this->fraud_score() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_blocked = 3;
  if (this->is_blocked() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fraudservice.TransactReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fraudservice.TransactReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fraudservice.TransactReply)
    MergeFrom(*source);
  }
}

void TransactReply::MergeFrom(const TransactReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fraudservice.TransactReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.message_code() != 0) {
    _internal_set_message_code(from._internal_message_code());
  }
  if (!(from.fraud_score() <= 0 && from.fraud_score() >= 0)) {
    _internal_set_fraud_score(from._internal_fraud_score());
  }
  if (from.is_blocked() != 0) {
    _internal_set_is_blocked(from._internal_is_blocked());
  }
}

void TransactReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fraudservice.TransactReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactReply::CopyFrom(const TransactReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fraudservice.TransactReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactReply::IsInitialized() const {
  return true;
}

void TransactReply::InternalSwap(TransactReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_code_, other->message_code_);
  swap(fraud_score_, other->fraud_score_);
  swap(is_blocked_, other->is_blocked_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fraudservice
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fraudservice::TransactRequest* Arena::CreateMaybeMessage< ::fraudservice::TransactRequest >(Arena* arena) {
  return Arena::CreateInternal< ::fraudservice::TransactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fraudservice::TransactReply* Arena::CreateMaybeMessage< ::fraudservice::TransactReply >(Arena* arena) {
  return Arena::CreateInternal< ::fraudservice::TransactReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
