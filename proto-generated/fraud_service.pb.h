// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fraud_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fraud_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fraud_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fraud_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fraud_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fraud_5fservice_2eproto;
namespace fraudservice {
class TransactReply;
class TransactReplyDefaultTypeInternal;
extern TransactReplyDefaultTypeInternal _TransactReply_default_instance_;
class TransactRequest;
class TransactRequestDefaultTypeInternal;
extern TransactRequestDefaultTypeInternal _TransactRequest_default_instance_;
}  // namespace fraudservice
PROTOBUF_NAMESPACE_OPEN
template<> ::fraudservice::TransactReply* Arena::CreateMaybeMessage<::fraudservice::TransactReply>(Arena*);
template<> ::fraudservice::TransactRequest* Arena::CreateMaybeMessage<::fraudservice::TransactRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fraudservice {

enum TransactionStatus : int {
  TRANSACTION_OK = 0,
  TRANSACTION_FAILED = 1,
  TransactionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransactionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransactionStatus_IsValid(int value);
constexpr TransactionStatus TransactionStatus_MIN = TRANSACTION_OK;
constexpr TransactionStatus TransactionStatus_MAX = TRANSACTION_FAILED;
constexpr int TransactionStatus_ARRAYSIZE = TransactionStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionStatus_descriptor();
template<typename T>
inline const std::string& TransactionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransactionStatus_descriptor(), enum_t_value);
}
inline bool TransactionStatus_Parse(
    const std::string& name, TransactionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransactionStatus>(
    TransactionStatus_descriptor(), name, value);
}
// ===================================================================

class TransactRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fraudservice.TransactRequest) */ {
 public:
  TransactRequest();
  virtual ~TransactRequest();

  TransactRequest(const TransactRequest& from);
  TransactRequest(TransactRequest&& from) noexcept
    : TransactRequest() {
    *this = ::std::move(from);
  }

  inline TransactRequest& operator=(const TransactRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactRequest& operator=(TransactRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactRequest* internal_default_instance() {
    return reinterpret_cast<const TransactRequest*>(
               &_TransactRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransactRequest& a, TransactRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactRequest* New() const final {
    return CreateMaybeMessage<TransactRequest>(nullptr);
  }

  TransactRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactRequest& from);
  void MergeFrom(const TransactRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fraudservice.TransactRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fraud_5fservice_2eproto);
    return ::descriptor_table_fraud_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionIdFieldNumber = 1,
    kIpAddressFieldNumber = 2,
    kUserAddressFieldNumber = 5,
    kShippingAddressFieldNumber = 6,
    kCityFieldNumber = 7,
    kCountryFieldNumber = 8,
    kCookieHashFieldNumber = 12,
    kTimeStampFieldNumber = 13,
    kMerchantIdFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kAmountFieldNumber = 9,
    kLatitudeFieldNumber = 10,
    kLongitudeFieldNumber = 11,
  };
  // string transactionId = 1;
  void clear_transactionid();
  const std::string& transactionid() const;
  void set_transactionid(const std::string& value);
  void set_transactionid(std::string&& value);
  void set_transactionid(const char* value);
  void set_transactionid(const char* value, size_t size);
  std::string* mutable_transactionid();
  std::string* release_transactionid();
  void set_allocated_transactionid(std::string* transactionid);
  private:
  const std::string& _internal_transactionid() const;
  void _internal_set_transactionid(const std::string& value);
  std::string* _internal_mutable_transactionid();
  public:

  // string ipAddress = 2;
  void clear_ipaddress();
  const std::string& ipaddress() const;
  void set_ipaddress(const std::string& value);
  void set_ipaddress(std::string&& value);
  void set_ipaddress(const char* value);
  void set_ipaddress(const char* value, size_t size);
  std::string* mutable_ipaddress();
  std::string* release_ipaddress();
  void set_allocated_ipaddress(std::string* ipaddress);
  private:
  const std::string& _internal_ipaddress() const;
  void _internal_set_ipaddress(const std::string& value);
  std::string* _internal_mutable_ipaddress();
  public:

  // string userAddress = 5;
  void clear_useraddress();
  const std::string& useraddress() const;
  void set_useraddress(const std::string& value);
  void set_useraddress(std::string&& value);
  void set_useraddress(const char* value);
  void set_useraddress(const char* value, size_t size);
  std::string* mutable_useraddress();
  std::string* release_useraddress();
  void set_allocated_useraddress(std::string* useraddress);
  private:
  const std::string& _internal_useraddress() const;
  void _internal_set_useraddress(const std::string& value);
  std::string* _internal_mutable_useraddress();
  public:

  // string shippingAddress = 6;
  void clear_shippingaddress();
  const std::string& shippingaddress() const;
  void set_shippingaddress(const std::string& value);
  void set_shippingaddress(std::string&& value);
  void set_shippingaddress(const char* value);
  void set_shippingaddress(const char* value, size_t size);
  std::string* mutable_shippingaddress();
  std::string* release_shippingaddress();
  void set_allocated_shippingaddress(std::string* shippingaddress);
  private:
  const std::string& _internal_shippingaddress() const;
  void _internal_set_shippingaddress(const std::string& value);
  std::string* _internal_mutable_shippingaddress();
  public:

  // string city = 7;
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string country = 8;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string cookie_hash = 12;
  void clear_cookie_hash();
  const std::string& cookie_hash() const;
  void set_cookie_hash(const std::string& value);
  void set_cookie_hash(std::string&& value);
  void set_cookie_hash(const char* value);
  void set_cookie_hash(const char* value, size_t size);
  std::string* mutable_cookie_hash();
  std::string* release_cookie_hash();
  void set_allocated_cookie_hash(std::string* cookie_hash);
  private:
  const std::string& _internal_cookie_hash() const;
  void _internal_set_cookie_hash(const std::string& value);
  std::string* _internal_mutable_cookie_hash();
  public:

  // bytes timeStamp = 13;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const void* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // int64 merchantId = 3;
  void clear_merchantid();
  ::PROTOBUF_NAMESPACE_ID::int64 merchantid() const;
  void set_merchantid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_merchantid() const;
  void _internal_set_merchantid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 userId = 4;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float amount = 9;
  void clear_amount();
  float amount() const;
  void set_amount(float value);
  private:
  float _internal_amount() const;
  void _internal_set_amount(float value);
  public:

  // float latitude = 10;
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // float longitude = 11;
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:fraudservice.TransactRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr useraddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shippingaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cookie_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 merchantid_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  float amount_;
  float latitude_;
  float longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fraud_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TransactReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fraudservice.TransactReply) */ {
 public:
  TransactReply();
  virtual ~TransactReply();

  TransactReply(const TransactReply& from);
  TransactReply(TransactReply&& from) noexcept
    : TransactReply() {
    *this = ::std::move(from);
  }

  inline TransactReply& operator=(const TransactReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactReply& operator=(TransactReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactReply* internal_default_instance() {
    return reinterpret_cast<const TransactReply*>(
               &_TransactReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransactReply& a, TransactReply& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactReply* New() const final {
    return CreateMaybeMessage<TransactReply>(nullptr);
  }

  TransactReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactReply& from);
  void MergeFrom(const TransactReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fraudservice.TransactReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fraud_5fservice_2eproto);
    return ::descriptor_table_fraud_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 4,
    kMessageCodeFieldNumber = 1,
    kFraudScoreFieldNumber = 2,
    kIsBlockedFieldNumber = 3,
  };
  // string reason = 4;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // int32 message_code = 1;
  void clear_message_code();
  ::PROTOBUF_NAMESPACE_ID::int32 message_code() const;
  void set_message_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_code() const;
  void _internal_set_message_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float fraud_score = 2;
  void clear_fraud_score();
  float fraud_score() const;
  void set_fraud_score(float value);
  private:
  float _internal_fraud_score() const;
  void _internal_set_fraud_score(float value);
  public:

  // bool is_blocked = 3;
  void clear_is_blocked();
  bool is_blocked() const;
  void set_is_blocked(bool value);
  private:
  bool _internal_is_blocked() const;
  void _internal_set_is_blocked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fraudservice.TransactReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_code_;
  float fraud_score_;
  bool is_blocked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fraud_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactRequest

// string transactionId = 1;
inline void TransactRequest::clear_transactionid() {
  transactionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactRequest::transactionid() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactRequest.transactionId)
  return _internal_transactionid();
}
inline void TransactRequest::set_transactionid(const std::string& value) {
  _internal_set_transactionid(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactRequest.transactionId)
}
inline std::string* TransactRequest::mutable_transactionid() {
  // @@protoc_insertion_point(field_mutable:fraudservice.TransactRequest.transactionId)
  return _internal_mutable_transactionid();
}
inline const std::string& TransactRequest::_internal_transactionid() const {
  return transactionid_.GetNoArena();
}
inline void TransactRequest::_internal_set_transactionid(const std::string& value) {
  
  transactionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactRequest::set_transactionid(std::string&& value) {
  
  transactionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraudservice.TransactRequest.transactionId)
}
inline void TransactRequest::set_transactionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transactionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraudservice.TransactRequest.transactionId)
}
inline void TransactRequest::set_transactionid(const char* value, size_t size) {
  
  transactionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraudservice.TransactRequest.transactionId)
}
inline std::string* TransactRequest::_internal_mutable_transactionid() {
  
  return transactionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactRequest::release_transactionid() {
  // @@protoc_insertion_point(field_release:fraudservice.TransactRequest.transactionId)
  
  return transactionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactRequest::set_allocated_transactionid(std::string* transactionid) {
  if (transactionid != nullptr) {
    
  } else {
    
  }
  transactionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transactionid);
  // @@protoc_insertion_point(field_set_allocated:fraudservice.TransactRequest.transactionId)
}

// string ipAddress = 2;
inline void TransactRequest::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactRequest::ipaddress() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactRequest.ipAddress)
  return _internal_ipaddress();
}
inline void TransactRequest::set_ipaddress(const std::string& value) {
  _internal_set_ipaddress(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactRequest.ipAddress)
}
inline std::string* TransactRequest::mutable_ipaddress() {
  // @@protoc_insertion_point(field_mutable:fraudservice.TransactRequest.ipAddress)
  return _internal_mutable_ipaddress();
}
inline const std::string& TransactRequest::_internal_ipaddress() const {
  return ipaddress_.GetNoArena();
}
inline void TransactRequest::_internal_set_ipaddress(const std::string& value) {
  
  ipaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactRequest::set_ipaddress(std::string&& value) {
  
  ipaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraudservice.TransactRequest.ipAddress)
}
inline void TransactRequest::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraudservice.TransactRequest.ipAddress)
}
inline void TransactRequest::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraudservice.TransactRequest.ipAddress)
}
inline std::string* TransactRequest::_internal_mutable_ipaddress() {
  
  return ipaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactRequest::release_ipaddress() {
  // @@protoc_insertion_point(field_release:fraudservice.TransactRequest.ipAddress)
  
  return ipaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactRequest::set_allocated_ipaddress(std::string* ipaddress) {
  if (ipaddress != nullptr) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:fraudservice.TransactRequest.ipAddress)
}

// int64 merchantId = 3;
inline void TransactRequest::clear_merchantid() {
  merchantid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactRequest::_internal_merchantid() const {
  return merchantid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactRequest::merchantid() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactRequest.merchantId)
  return _internal_merchantid();
}
inline void TransactRequest::_internal_set_merchantid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  merchantid_ = value;
}
inline void TransactRequest::set_merchantid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_merchantid(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactRequest.merchantId)
}

// int64 userId = 4;
inline void TransactRequest::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactRequest::userid() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactRequest.userId)
  return _internal_userid();
}
inline void TransactRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void TransactRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactRequest.userId)
}

// string userAddress = 5;
inline void TransactRequest::clear_useraddress() {
  useraddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactRequest::useraddress() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactRequest.userAddress)
  return _internal_useraddress();
}
inline void TransactRequest::set_useraddress(const std::string& value) {
  _internal_set_useraddress(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactRequest.userAddress)
}
inline std::string* TransactRequest::mutable_useraddress() {
  // @@protoc_insertion_point(field_mutable:fraudservice.TransactRequest.userAddress)
  return _internal_mutable_useraddress();
}
inline const std::string& TransactRequest::_internal_useraddress() const {
  return useraddress_.GetNoArena();
}
inline void TransactRequest::_internal_set_useraddress(const std::string& value) {
  
  useraddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactRequest::set_useraddress(std::string&& value) {
  
  useraddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraudservice.TransactRequest.userAddress)
}
inline void TransactRequest::set_useraddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  useraddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraudservice.TransactRequest.userAddress)
}
inline void TransactRequest::set_useraddress(const char* value, size_t size) {
  
  useraddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraudservice.TransactRequest.userAddress)
}
inline std::string* TransactRequest::_internal_mutable_useraddress() {
  
  return useraddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactRequest::release_useraddress() {
  // @@protoc_insertion_point(field_release:fraudservice.TransactRequest.userAddress)
  
  return useraddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactRequest::set_allocated_useraddress(std::string* useraddress) {
  if (useraddress != nullptr) {
    
  } else {
    
  }
  useraddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), useraddress);
  // @@protoc_insertion_point(field_set_allocated:fraudservice.TransactRequest.userAddress)
}

// string shippingAddress = 6;
inline void TransactRequest::clear_shippingaddress() {
  shippingaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactRequest::shippingaddress() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactRequest.shippingAddress)
  return _internal_shippingaddress();
}
inline void TransactRequest::set_shippingaddress(const std::string& value) {
  _internal_set_shippingaddress(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactRequest.shippingAddress)
}
inline std::string* TransactRequest::mutable_shippingaddress() {
  // @@protoc_insertion_point(field_mutable:fraudservice.TransactRequest.shippingAddress)
  return _internal_mutable_shippingaddress();
}
inline const std::string& TransactRequest::_internal_shippingaddress() const {
  return shippingaddress_.GetNoArena();
}
inline void TransactRequest::_internal_set_shippingaddress(const std::string& value) {
  
  shippingaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactRequest::set_shippingaddress(std::string&& value) {
  
  shippingaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraudservice.TransactRequest.shippingAddress)
}
inline void TransactRequest::set_shippingaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shippingaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraudservice.TransactRequest.shippingAddress)
}
inline void TransactRequest::set_shippingaddress(const char* value, size_t size) {
  
  shippingaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraudservice.TransactRequest.shippingAddress)
}
inline std::string* TransactRequest::_internal_mutable_shippingaddress() {
  
  return shippingaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactRequest::release_shippingaddress() {
  // @@protoc_insertion_point(field_release:fraudservice.TransactRequest.shippingAddress)
  
  return shippingaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactRequest::set_allocated_shippingaddress(std::string* shippingaddress) {
  if (shippingaddress != nullptr) {
    
  } else {
    
  }
  shippingaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shippingaddress);
  // @@protoc_insertion_point(field_set_allocated:fraudservice.TransactRequest.shippingAddress)
}

// string city = 7;
inline void TransactRequest::clear_city() {
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactRequest::city() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactRequest.city)
  return _internal_city();
}
inline void TransactRequest::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactRequest.city)
}
inline std::string* TransactRequest::mutable_city() {
  // @@protoc_insertion_point(field_mutable:fraudservice.TransactRequest.city)
  return _internal_mutable_city();
}
inline const std::string& TransactRequest::_internal_city() const {
  return city_.GetNoArena();
}
inline void TransactRequest::_internal_set_city(const std::string& value) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactRequest::set_city(std::string&& value) {
  
  city_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraudservice.TransactRequest.city)
}
inline void TransactRequest::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraudservice.TransactRequest.city)
}
inline void TransactRequest::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraudservice.TransactRequest.city)
}
inline std::string* TransactRequest::_internal_mutable_city() {
  
  return city_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactRequest::release_city() {
  // @@protoc_insertion_point(field_release:fraudservice.TransactRequest.city)
  
  return city_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactRequest::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:fraudservice.TransactRequest.city)
}

// string country = 8;
inline void TransactRequest::clear_country() {
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactRequest::country() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactRequest.country)
  return _internal_country();
}
inline void TransactRequest::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactRequest.country)
}
inline std::string* TransactRequest::mutable_country() {
  // @@protoc_insertion_point(field_mutable:fraudservice.TransactRequest.country)
  return _internal_mutable_country();
}
inline const std::string& TransactRequest::_internal_country() const {
  return country_.GetNoArena();
}
inline void TransactRequest::_internal_set_country(const std::string& value) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactRequest::set_country(std::string&& value) {
  
  country_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraudservice.TransactRequest.country)
}
inline void TransactRequest::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraudservice.TransactRequest.country)
}
inline void TransactRequest::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraudservice.TransactRequest.country)
}
inline std::string* TransactRequest::_internal_mutable_country() {
  
  return country_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactRequest::release_country() {
  // @@protoc_insertion_point(field_release:fraudservice.TransactRequest.country)
  
  return country_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactRequest::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:fraudservice.TransactRequest.country)
}

// float amount = 9;
inline void TransactRequest::clear_amount() {
  amount_ = 0;
}
inline float TransactRequest::_internal_amount() const {
  return amount_;
}
inline float TransactRequest::amount() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactRequest.amount)
  return _internal_amount();
}
inline void TransactRequest::_internal_set_amount(float value) {
  
  amount_ = value;
}
inline void TransactRequest::set_amount(float value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactRequest.amount)
}

// float latitude = 10;
inline void TransactRequest::clear_latitude() {
  latitude_ = 0;
}
inline float TransactRequest::_internal_latitude() const {
  return latitude_;
}
inline float TransactRequest::latitude() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactRequest.latitude)
  return _internal_latitude();
}
inline void TransactRequest::_internal_set_latitude(float value) {
  
  latitude_ = value;
}
inline void TransactRequest::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactRequest.latitude)
}

// float longitude = 11;
inline void TransactRequest::clear_longitude() {
  longitude_ = 0;
}
inline float TransactRequest::_internal_longitude() const {
  return longitude_;
}
inline float TransactRequest::longitude() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactRequest.longitude)
  return _internal_longitude();
}
inline void TransactRequest::_internal_set_longitude(float value) {
  
  longitude_ = value;
}
inline void TransactRequest::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactRequest.longitude)
}

// string cookie_hash = 12;
inline void TransactRequest::clear_cookie_hash() {
  cookie_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactRequest::cookie_hash() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactRequest.cookie_hash)
  return _internal_cookie_hash();
}
inline void TransactRequest::set_cookie_hash(const std::string& value) {
  _internal_set_cookie_hash(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactRequest.cookie_hash)
}
inline std::string* TransactRequest::mutable_cookie_hash() {
  // @@protoc_insertion_point(field_mutable:fraudservice.TransactRequest.cookie_hash)
  return _internal_mutable_cookie_hash();
}
inline const std::string& TransactRequest::_internal_cookie_hash() const {
  return cookie_hash_.GetNoArena();
}
inline void TransactRequest::_internal_set_cookie_hash(const std::string& value) {
  
  cookie_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactRequest::set_cookie_hash(std::string&& value) {
  
  cookie_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraudservice.TransactRequest.cookie_hash)
}
inline void TransactRequest::set_cookie_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cookie_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraudservice.TransactRequest.cookie_hash)
}
inline void TransactRequest::set_cookie_hash(const char* value, size_t size) {
  
  cookie_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraudservice.TransactRequest.cookie_hash)
}
inline std::string* TransactRequest::_internal_mutable_cookie_hash() {
  
  return cookie_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactRequest::release_cookie_hash() {
  // @@protoc_insertion_point(field_release:fraudservice.TransactRequest.cookie_hash)
  
  return cookie_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactRequest::set_allocated_cookie_hash(std::string* cookie_hash) {
  if (cookie_hash != nullptr) {
    
  } else {
    
  }
  cookie_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cookie_hash);
  // @@protoc_insertion_point(field_set_allocated:fraudservice.TransactRequest.cookie_hash)
}

// bytes timeStamp = 13;
inline void TransactRequest::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactRequest.timeStamp)
  return _internal_timestamp();
}
inline void TransactRequest::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactRequest.timeStamp)
}
inline std::string* TransactRequest::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:fraudservice.TransactRequest.timeStamp)
  return _internal_mutable_timestamp();
}
inline const std::string& TransactRequest::_internal_timestamp() const {
  return timestamp_.GetNoArena();
}
inline void TransactRequest::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactRequest::set_timestamp(std::string&& value) {
  
  timestamp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraudservice.TransactRequest.timeStamp)
}
inline void TransactRequest::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraudservice.TransactRequest.timeStamp)
}
inline void TransactRequest::set_timestamp(const void* value, size_t size) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraudservice.TransactRequest.timeStamp)
}
inline std::string* TransactRequest::_internal_mutable_timestamp() {
  
  return timestamp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactRequest::release_timestamp() {
  // @@protoc_insertion_point(field_release:fraudservice.TransactRequest.timeStamp)
  
  return timestamp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactRequest::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:fraudservice.TransactRequest.timeStamp)
}

// -------------------------------------------------------------------

// TransactReply

// int32 message_code = 1;
inline void TransactReply::clear_message_code() {
  message_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransactReply::_internal_message_code() const {
  return message_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransactReply::message_code() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactReply.message_code)
  return _internal_message_code();
}
inline void TransactReply::_internal_set_message_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  message_code_ = value;
}
inline void TransactReply::set_message_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_code(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactReply.message_code)
}

// float fraud_score = 2;
inline void TransactReply::clear_fraud_score() {
  fraud_score_ = 0;
}
inline float TransactReply::_internal_fraud_score() const {
  return fraud_score_;
}
inline float TransactReply::fraud_score() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactReply.fraud_score)
  return _internal_fraud_score();
}
inline void TransactReply::_internal_set_fraud_score(float value) {
  
  fraud_score_ = value;
}
inline void TransactReply::set_fraud_score(float value) {
  _internal_set_fraud_score(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactReply.fraud_score)
}

// bool is_blocked = 3;
inline void TransactReply::clear_is_blocked() {
  is_blocked_ = false;
}
inline bool TransactReply::_internal_is_blocked() const {
  return is_blocked_;
}
inline bool TransactReply::is_blocked() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactReply.is_blocked)
  return _internal_is_blocked();
}
inline void TransactReply::_internal_set_is_blocked(bool value) {
  
  is_blocked_ = value;
}
inline void TransactReply::set_is_blocked(bool value) {
  _internal_set_is_blocked(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactReply.is_blocked)
}

// string reason = 4;
inline void TransactReply::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactReply::reason() const {
  // @@protoc_insertion_point(field_get:fraudservice.TransactReply.reason)
  return _internal_reason();
}
inline void TransactReply::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:fraudservice.TransactReply.reason)
}
inline std::string* TransactReply::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:fraudservice.TransactReply.reason)
  return _internal_mutable_reason();
}
inline const std::string& TransactReply::_internal_reason() const {
  return reason_.GetNoArena();
}
inline void TransactReply::_internal_set_reason(const std::string& value) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactReply::set_reason(std::string&& value) {
  
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraudservice.TransactReply.reason)
}
inline void TransactReply::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraudservice.TransactReply.reason)
}
inline void TransactReply::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraudservice.TransactReply.reason)
}
inline std::string* TransactReply::_internal_mutable_reason() {
  
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactReply::release_reason() {
  // @@protoc_insertion_point(field_release:fraudservice.TransactReply.reason)
  
  return reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactReply::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:fraudservice.TransactReply.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fraudservice

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fraudservice::TransactionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fraudservice::TransactionStatus>() {
  return ::fraudservice::TransactionStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fraud_5fservice_2eproto
